// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtualStore.Infrastructure.Persisntences.Context;

#nullable disable

namespace VirtualStore.Infrastructure.Persistences.Migrations
{
    [DbContext(typeof(VirtualStoreDbContext))]
    [Migration("20230828024255_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduto", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("category_product", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cep");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("complement");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DeleteBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delete_by");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("delete_on");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("number");

                    b.Property<string>("PublicPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("public_place");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_on");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DeleteBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delete_by");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("delete_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_on");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DeleteBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delete_by");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("delete_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("state_id");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_on");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CpfOrCnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cpf_or_cnpj");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DeleteBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delete_by");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("delete_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("TypeClient")
                        .HasColumnType("int")
                        .HasColumnName("type_client");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_on");

                    b.HasKey("Id");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DeleteBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delete_by");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("delete_on");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int")
                        .HasColumnName("delivery_address_id");

                    b.Property<DateTime>("Instant")
                        .HasColumnType("datetime2")
                        .HasColumnName("instant");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_on");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliveryAddressId")
                        .IsUnique();

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Payment", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("StatePayment")
                        .HasColumnType("int")
                        .HasColumnName("state_payment");

                    b.HasKey("OrderId");

                    b.ToTable("payment", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DeleteBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delete_by");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("delete_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_on");

                    b.HasKey("Id");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DeleteBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("delete_by");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("delete_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_on");

                    b.HasKey("Id");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.PaymentWithCard", b =>
                {
                    b.HasBaseType("VirtualStore.Core.Entities.Payment");

                    b.Property<int>("NumberOfParcels")
                        .HasColumnType("int")
                        .HasColumnName("number_of_parcels");

                    b.ToTable("payment_with_card", (string)null);
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.PaymentWithSlip", b =>
                {
                    b.HasBaseType("VirtualStore.Core.Entities.Payment");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date");

                    b.ToTable("payment_with_slip", (string)null);
                });

            modelBuilder.Entity("CategoryProduto", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualStore.Core.Entities.Produto", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Address", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.City", "City")
                        .WithOne()
                        .HasForeignKey("VirtualStore.Core.Entities.Address", "CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VirtualStore.Core.Entities.Client", "Client")
                        .WithMany("Adresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.City", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Client", b =>
                {
                    b.OwnsMany("VirtualStore.Core.Entities.Phone", "Phones", b1 =>
                        {
                            b1.Property<int>("client_id")
                                .HasColumnType("int");

                            b1.Property<string>("CodeArea")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("code_area");

                            b1.Property<string>("CodeCountry")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("code_country");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("number");

                            b1.HasKey("client_id");

                            b1.ToTable("phone", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("client_id");
                        });

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Order", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VirtualStore.Core.Entities.Address", "DeliveryAddress")
                        .WithOne()
                        .HasForeignKey("VirtualStore.Core.Entities.Order", "DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DeliveryAddress");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.Order", "Order")
                        .WithMany("Itens")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VirtualStore.Core.Entities.Produto", "Product")
                        .WithMany("OrderItens")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Payment", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("VirtualStore.Core.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.PaymentWithCard", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.Payment", null)
                        .WithOne()
                        .HasForeignKey("VirtualStore.Core.Entities.PaymentWithCard", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.PaymentWithSlip", b =>
                {
                    b.HasOne("VirtualStore.Core.Entities.Payment", null)
                        .WithOne()
                        .HasForeignKey("VirtualStore.Core.Entities.PaymentWithSlip", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Client", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Order", b =>
                {
                    b.Navigation("Itens");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.Produto", b =>
                {
                    b.Navigation("OrderItens");
                });

            modelBuilder.Entity("VirtualStore.Core.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
